/*CREATE PROCEDURE INSERT_ROW_OC_PERSON @CNIC NUMERIC, @FIRST_NAME VARCHAR(30), @LAST_NAME VARCHAR(30), @ADDRESS VARCHAR(100), @AGE NUMERIC(2), @GENDER VARCHAR(1), @DOB DATE, @NATIONALITY VARCHAR(30), @EMAIL VARCHAR(30), @CONTACT NUMERIC = NULL
AS
    IF EXISTS (SELECT * FROM OC_PERSON WHERE CNIC = @CNIC)
	BEGIN

        UPDATE OC_PERSON SET FIRST_NAME = @FIRST_NAME, LAST_NAME = @LAST_NAME, ADDRESS = @ADDRESS, AGE = @AGE, GENDER = @GENDER, DOB = @DOB, NATIONALITY = @NATIONALITY, EMAIL = @EMAIL WHERE CNIC = @CNIC
	
	END
	ELSE
	BEGIN

		INSERT INTO OC_PERSON (CNIC, FIRST_NAME, LAST_NAME, ADDRESS, AGE, GENDER, DOB, NATIONALITY, EMAIL) VALUES (@CNIC, @FIRST_NAME, @LAST_NAME, @ADDRESS, @AGE, @GENDER, @DOB, @NATIONALITY, @EMAIL)
	
	END

	IF @CONTACT IS NOT NULL
	BEGIN

		DECLARE @CNI NUMERIC
		SET @CNI = @CNIC
		DECLARE @CONTAC	NUMERIC
		SET @CONTAC = @CONTACT

		EXEC INSERT_ROW_OC_PERSON_CONTACT @CNIC = @CNIC, @CONTACT = @CONTACT

	END

	DECLARE @COUNT NUMERIC
	SET @COUNT = 0
	SELECT TOP 1 @COUNT = SR_NO FROM OC_PERSON_HISTORY WHERE CNIC = @CNIC ORDER BY SR_NO DESC
	INSERT INTO OC_PERSON_HISTORY (SR_NO, CNIC, FIRST_NAME, LAST_NAME, ADDRESS, AGE, GENDER, DOB, NATIONALITY, EMAIL) VALUES (@COUNT + 1, @CNIC, @FIRST_NAME, @LAST_NAME, @ADDRESS, @AGE, @GENDER, @DOB, @NATIONALITY, @EMAIL)

RETURN*/


/*CREATE PROC INSERT_ROW_OC_PERSON_CONTACT @CNIC NUMERIC, @CONTACT NUMERIC
AS
	
	IF EXISTS (SELECT * FROM OC_PERSON_CONTACT WHERE CONTACT = @CONTACT AND CNIC = @CNIC)
	BEGIN

		PRINT 'The provided number is already saved against the provided cnic.'
	
	END
	ELSE 
	BEGIN

		DECLARE @SR_NO NUMERIC
		SET @SR_NO = 0
		SELECT TOP 1 @SR_NO = SR_NO FROM OC_PERSON_CONTACT WHERE CNIC = @CNIC ORDER BY SR_NO DESC
		INSERT INTO OC_PERSON_CONTACT (CNIC, SR_NO, CONTACT) VALUES (@CNIC, @SR_NO + 1, @CONTACT)
	
	END
RETURN*/


/*CREATE PROCEDURE INSERT_ROW_OC_PATIENT @CNIC NUMERIC
AS

	IF EXISTS (SELECT * FROM OC_PATIENT WHERE CNIC = @CNIC)
	BEGIN

		PRINT 'The Patient is already registered.'
	
	END
	ELSE
	BEGIN

		DECLARE @PAT_ID NUMERIC
		SET @PAT_ID = 0
		SELECT TOP 1 @PAT_ID = PAT_ID FROM OC_PATIENT ORDER BY PAT_ID DESC
		INSERT INTO OC_PATIENT (CNIC, PAT_ID) VALUES (@CNIC, @PAT_ID + 00001)
	
	END
	
RETURN*/


/*CREATE PROCEDURE INSERT_ROW_OC_VISITS @VISIT_NO NUMERIC = NULL, @PAT_ID NUMERIC, @DOC_ID NUMERIC, @PROBLEMS TEXT, @DIAGNOSIS TEXT, @VISIT_DATE DATE = NULL, @VISIT_TIME TIME = NULL, @FEE NUMERIC = NULL
AS

	IF @VISIT_NO IS NULL
	BEGIN

		SELECT TOP 1 @VISIT_NO = VISIT_NO FROM OC_VISITS WHERE PAT_ID = @PAT_ID AND DOC_ID = @DOC_ID ORDER BY VISIT_NO DESC
		
		IF @VISIT_NO IS NULL
		BEGIN

			SET @VISIT_NO = 0
			SET @VISIT_NO = @VISIT_NO + 010001
		
		END
		ELSE
		BEGIN

			SET @VISIT_NO = @VISIT_NO + 1
		END

	END

	IF @VISIT_DATE IS NULL
	BEGIN

		SELECT @VISIT_DATE = CAST(GETDATE() AS DATE)

	END

	IF @VISIT_TIME IS NULL
	BEGIN

		SELECT @VISIT_TIME = CAST(GETDATE() AS TIME)

	END

	IF @FEE IS NULL
	BEGIN

		SELECT @FEE = FEE FROM OC_DOCTOR WHERE DOC_ID = @DOC_ID

	END

	INSERT INTO OC_VISITS(VISIT_NO, PAT_ID, DOC_ID, PROBLEMS, DIAGNOSIS, VISIT_DATE, VISIT_TIME, FEE) VALUES (@VISIT_NO, @PAT_ID, @DOC_ID, @PROBLEMS, @DIAGNOSIS, @VISIT_DATE, @VISIT_TIME, @FEE)

RETURN*/


/*CREATE PROCEDURE INSERT_ROW_OC_DOCTOR @DOC_ID NUMERIC = NULL, @CNIC NUMERIC, @QUALIFICATION TEXT, @SPECIALIZATION TEXT, @FEE NUMERIC
AS
		
	IF @DOC_ID IS NOT NULL
	BEGIN

		IF EXISTS (SELECT * FROM OC_DOCTOR WHERE CNIC = @CNIC)
		BEGIN

			DECLARE @TEMP NUMERIC
			SET @TEMP = 0
			SELECT @TEMP = DOC_ID FROM OC_DOCTOR WHERE CNIC = @CNIC

			IF @TEMP = @DOC_ID
			BEGIN
	
				UPDATE OC_DOCTOR SET QUALIFICATION = @QUALIFICATION, SPECIALIZATION = @SPECIALIZATION, FEE = @FEE WHERE CNIC = @CNIC AND DOC_ID = @DOC_ID

			END
			ELSE
			BEGIN

				PRINT 'A doctor is already registered againts the provided cnic.'

			END				

		END
		ELSE
		BEGIN

			INSERT INTO OC_DOCTOR (DOC_ID, CNIC, QUALIFICATION, SPECIALIZATION, FEE) VALUES (@DOC_ID, @CNIC, @QUALIFICATION, @SPECIALIZATION, @FEE)

		END

	END
	ELSE
	BEGIN

		IF EXISTS (SELECT * FROM OC_DOCTOR WHERE CNIC = @CNIC)
		BEGIN

			SET @DOC_ID = 0
			SELECT @DOC_ID = DOC_ID FROM OC_DOCTOR WHERE CNIC = @CNIC

			UPDATE OC_DOCTOR SET QUALIFICATION = @QUALIFICATION, SPECIALIZATION = @SPECIALIZATION, FEE = @FEE WHERE DOC_ID = @DOC_ID

		END
		ELSE
		BEGIN

			SELECT TOP 1 @DOC_ID = DOC_ID FROM OC_DOCTOR ORDER BY DOC_ID DESC
			
			IF @DOC_ID IS NULL
			BEGIN
			
				SET @DOC_ID = 110000
			
			END

			SET @DOC_ID = @DOC_ID + 1

			INSERT INTO OC_DOCTOR (DOC_ID, CNIC, QUALIFICATION, SPECIALIZATION, FEE) VALUES (@DOC_ID, @CNIC, @QUALIFICATION, @SPECIALIZATION, @FEE)

		END

	END

	DECLARE @SR_NO NUMERIC
	SET @SR_NO = 0
	SELECT TOP 1 @SR_NO = SR_NO FROM OC_DOCTOR_HISTORY WHERE DOC_ID = @DOC_ID ORDER BY SR_NO DESC
	INSERT INTO OC_DOCTOR_HISTORY (SR_NO, DOC_ID, CNIC, QUALIFICATION, SPECIALIZATION, FEE) VALUES (@SR_NO + 1, @DOC_ID, @CNIC, @QUALIFICATION, @SPECIALIZATION, @FEE)

RETURN*/


/*CREATE PROCEDURE INSERT_ROW_OC_MEDICINE @MED_ID NUMERIC = NULL, @MED_NAME VARCHAR(30), @MED_POTENCY VARCHAR(10), @DESC TEXT, @MGF_DATE DATE, @EXP_DATE DATE, @QUANTITY NUMERIC, @PRICE NUMERIC
AS

	IF @MED_ID IS NOT NULL
	BEGIN

		IF EXISTS (SELECT * FROM OC_MEDICINE WHERE MED_ID = @MED_ID)
		BEGIN

			UPDATE OC_MEDICINE SET MED_NAME = @MED_NAME, MED_POTENCY = @MED_POTENCY, "DESC" = @DESC, MGF_DATE = @MGF_DATE, EXP_DATE = @EXP_DATE, QUANTITY = @QUANTITY, PRICE = @PRICE WHERE MED_ID = @MED_ID

		END
		ELSE
		BEGIN

			INSERT INTO OC_MEDICINE (MED_ID, MED_NAME, MED_POTENCY, "DESC", MGF_DATE, EXP_DATE, QUANTITY, PRICE) VALUES (@MED_ID, @MED_NAME, @MED_POTENCY, @DESC, @MGF_DATE, @EXP_DATE, @QUANTITY, @PRICE)

		END

	END
	ELSE
	BEGIN

		SELECT TOP 1 @MED_ID = MED_ID FROM OC_MEDICINE ORDER BY MED_ID DESC

		IF @MED_ID IS NULL
		BEGIN

			SET @MED_ID = 1120000

		END

		SET @MED_ID = @MED_ID + 1

		INSERT INTO OC_MEDICINE (MED_ID, MED_NAME, MED_POTENCY, "DESC", MGF_DATE, EXP_DATE, QUANTITY, PRICE) VALUES (@MED_ID, @MED_NAME, @MED_POTENCY, @DESC, @MGF_DATE, @EXP_DATE, @QUANTITY, @PRICE)

	END

	DECLARE @SR_NO NUMERIC
	SET @SR_NO = 0
	SELECT TOP 1 @SR_NO = SR_NO FROM OC_MEDICINE_HISTORY WHERE MED_ID = @MED_ID ORDER BY SR_NO DESC
	INSERT INTO OC_MEDICINE_HISTORY (SR_NO, MED_ID, MED_NAME, MED_POTENCY, "DESC", MGF_DATE, EXP_DATE, QUANTITY, PRICE) VALUES (@SR_NO + 1, @MED_ID, @MED_NAME, @MED_POTENCY, @DESC, @MGF_DATE, @EXP_DATE, @QUANTITY, @PRICE)


RETURN*/


/*CREATE PROCEDURE INSERT_ROW_OC_PERSCRIPTION @PER_ID NUMERIC = NULL, @VISIT_NO NUMERIC, @PAT_ID NUMERIC, @MED_ID NUMERIC, @DOC_ID NUMERIC, @QUANTITY NUMERIC
AS

	IF @PER_ID IS NOT NULL
	BEGIN

		IF EXISTS (SELECT * FROM OC_PERSCRIPTION WHERE PER_ID = @PER_ID)
		BEGIN

			PRINT 'A perscription with the provided id already exists.'

		END
		ELSE
		BEGIN		

			INSERT INTO OC_PERSCRIPTION (PER_ID, VISIT_NO, PAT_ID, MED_ID, DOC_ID, QUANTITY) VALUES (@PER_ID, @VISIT_NO, @PAT_ID, @MED_ID, @DOC_ID, @QUANTITY)

		END

	END
	ELSE
	BEGIN

		SELECT TOP 1 @PER_ID = PER_ID FROM OC_PERSCRIPTION ORDER BY PER_ID DESC
		IF @PER_ID IS NULL
		BEGIN

			SET @PER_ID = 000000

		END

		INSERT INTO OC_PERSCRIPTION (PER_ID, VISIT_NO, PAT_ID, MED_ID, DOC_ID, QUANTITY) VALUES (@PER_ID + 1, @VISIT_NO, @PAT_ID, @MED_ID, @DOC_ID, @QUANTITY)

	END

RETURN*/


/*CREATE PROCEDURE INSERT_ROW_OC_RECEIPT_DETAILS @RECEIPT_NO NUMERIC, @PER_ID NUMERIC, @VISIT_NO NUMERIC, @PAT_ID NUMERIC, @MED_ID NUMERIC, @QUANTITY NUMERIC, @TOTAL_COST NUMERIC = NULL
AS

	IF @TOTAL_COST IS NULL
	BEGIN

		SET @TOTAL_COST = 0
		SELECT @TOTAL_COST = PRICE FROM OC_MEDICINE WHERE MED_ID = @MED_ID
		SET @TOTAL_COST = @TOTAL_COST * @QUANTITY

	END

	INSERT INTO OC_RECEIPT_DETAILS (RECEIPT_NO, PER_ID, VISIT_NO, PAT_ID, MED_ID, QUANTITY, TOTAL_COST) VALUES (@RECEIPT_NO, @PER_ID, @VISIT_NO, @PAT_ID, @MED_ID,@QUANTITY, @TOTAL_COST)

RETURN*/


/*CREATE PROCEDURE INSERT_ROW_OC_RECEIPT @RECEIPT_NO NUMERIC = NULL, @RECEIPT_DATE DATE = NULL, @RECEIPT_TIME TIME = NULL, @TOTAL_COST NUMERIC
AS

	IF @RECEIPT_DATE IS NULL
	BEGIN
		
		SET @RECEIPT_DATE = CAST(GETDATE() AS DATE)

	END

	IF @RECEIPT_TIME IS NULL
	BEGIN

		SET @RECEIPT_TIME = CAST(GETDATE() AS TIME)

	END

	IF @RECEIPT_NO IS NOT NULL
	BEGIN
	
		IF EXISTS (SELECT * FROM OC_RECEIPT WHERE RECEIPT_NO = @RECEIPT_NO)
		BEGIN

			PRINT 'The receipt with the provided receipt no already exists.'

		END
		ELSE
		BEGIN

			INSERT INTO OC_RECEIPT (RECEIPT_NO, RECEIPT_DATE, RECEIPT_TIME, TOTAL_COST) VALUES (@RECEIPT_NO, @RECEIPT_DATE, @RECEIPT_TIME, @TOTAL_COST)
		
		END

	END
	ELSE
	BEGIN

		SELECT TOP 1 @RECEIPT_NO = RECEIPT_NO FROM OC_RECEIPT ORDER BY RECEIPT_NO DESC
		IF @RECEIPT_NO IS NULL
		BEGIN

			SET @RECEIPT_NO = 1100000

		END 
		SET @RECEIPT_NO = @RECEIPT_NO + 1
		INSERT INTO OC_RECEIPT (RECEIPT_NO, RECEIPT_DATE, RECEIPT_TIME, TOTAL_COST) VALUES (@RECEIPT_NO, @RECEIPT_DATE, @RECEIPT_TIME, @TOTAL_COST)

	END

RETURN*/


/*CREATE PROCEDURE DELETE_ROW_OC_PERSON @CNIC NUMERIC
AS 

	IF EXISTS (SELECT * FROM OC_PERSON WHERE CNIC = @CNIC) OR EXISTS (SELECT * FROM OC_PERSON_HISTORY WHERE CNIC = @CNIC) OR EXISTS (SELECT * FROM OC_PERSON_CONTACT WHERE CNIC = @CNIC)
	BEGIN

		DELETE FROM OC_PERSON_CONTACT WHERE CNIC = @CNIC
		DELETE FROM OC_PERSON WHERE CNIC = @CNIC
		DELETE FROM OC_PERSON_HISTORY WHERE CNIC = @CNIC

	END
	ELSE
	BEGIN

		PRINT 'The record doesnt exist'

	END

RETURN*/


/*CREATE PROCEDURE DELETE_ROW_OC_PERSON_CONTACT @CNIC NUMERIC
AS

	IF EXISTS (SELECT * FROM OC_PERSON_CONTACT WHERE CNIC = @CNIC)
	BEGIN

		DELETE FROM OC_PERSON_CONTACT WHERE CNIC = @CNIC

	END
	ELSE
	BEGIN

		PRINT 'The record against the provided cnic doesnt exist.'

	END

RETURN*/


/*CREATE PROCEDURE DELETE_ROW_OC_PATIENT @PAT_ID NUMERIC
AS

	IF EXISTS (SELECT * FROM OC_PATIENT WHERE PAT_ID = @PAT_ID)
	BEGIN

		DELETE FROM OC_PATIENT WHERE PAT_ID = @PAT_ID

	END
	ELSE
	BEGIN

		PRINT 'The record against the provided id doesnt exist.'

	END

RETURN*/


/*CREATE PROCEDURE DELETE_ROW_OC_VISITS @VISIT_NO NUMERIC, @PAT_ID NUMERIC, @DOC_ID NUMERIC
AS

	IF EXISTS (SELECT * FROM OC_VISITS WHERE VISIT_NO = @VISIT_NO AND PAT_ID = @PAT_ID AND DOC_ID = @DOC_ID)
	BEGIN

		DELETE FROM OC_VISITS WHERE PAT_ID = @PAT_ID AND VISIT_NO = @VISIT_NO AND DOC_ID = @DOC_ID

	END
	ELSE
	BEGIN

		PRINT 'The record against the provided arguments doesnt exist.'

	END

RETURN*/


/*CREATE PROCEDURE DELETE_ROW_OC_DOCTOR @DOC_ID NUMERIC
AS

	IF EXISTS (SELECT * FROM OC_DOCTOR WHERE DOC_ID = @DOC_ID)
	BEGIN

		DELETE FROM OC_DOCTOR WHERE DOC_ID = @DOC_ID
		DELETE FROM OC_DOCTOR_HISTORY WHERE DOC_ID = @DOC_ID

	END
	ELSE
	BEGIN
	
		PRINT 'The record againts the provided doctor id doesnt exist.'

	END

RETURN*/


/*CREATE PROCEDURE DELETE_ROW_OC_MEDICINE @MED_ID NUMERIC
AS

	IF EXISTS (SELECT * FROM OC_MEDICINE WHERE MED_ID = @MED_ID) OR EXISTS (SELECT * FROM OC_MEDICINE_HISTORY WHERE MED_ID = @MED_ID)
	BEGIN

		DELETE FROM OC_MEDICINE WHERE MED_ID = @MED_ID
		DELETE FROM OC_MEDICINE_HISTORY WHERE MED_ID = @MED_ID

	END
	ELSE
	BEGIN

		PRINT 'The record againts the provided medicine id doesnt exist.'

	END

RETURN*/


/*CREATE PROCEDURE DELETE_ROW_OC_PERSCRIPTION @PER_ID NUMERIC, @VISIT_NO NUMERIC, @PAT_ID NUMERIC, @MED_ID NUMERIC, @DOC_ID NUMERIC
AS

	IF EXISTS (SELECT * FROM OC_PERSCRIPTION WHERE PER_ID = @PER_ID AND VISIT_NO = @VISIT_NO AND PAT_ID = @PAT_ID AND MED_ID = @MED_ID AND DOC_ID = @DOC_ID)
	BEGIN

		DELETE FROM OC_PERSCRIPTION WHERE PER_ID = @PER_ID AND VISIT_NO = @VISIT_NO AND PAT_ID = @PAT_ID AND MED_ID = @MED_ID AND DOC_ID = @DOC_ID

	END
	ELSE
	BEGIN

		PRINT 'The record againts the provided keys doesnt exist.'

	END

RETURN*/


/*CREATE PROCEDURE DELETE_ROW_OC_RECEIPT_DETAILS @RECEIPT_NO NUMERIC
AS

	IF EXISTS (SELECT * FROM OC_RECEIPT_DETAILS WHERE RECEIPT_NO = @RECEIPT_NO)
	BEGIN

		DELETE FROM OC_RECEIPT_DETAILS WHERE RECEIPT_NO = @RECEIPT_NO

	END
	ELSE
	BEGIN

		PRINT 'The record against the provided id doesnt exist.'

	END

RETURN*/


/*CREATE PROCEDURE DELETE_ROW_OC_RECEIPT @RECEIPT_NO NUMERIC
AS

	IF EXISTS (SELECT * FROM OC_RECEIPT_DETAILS WHERE RECEIPT_NO = @RECEIPT_NO)
	BEGIN

		DECLARE @TEMP NUMERIC
		SET @TEMP = @RECEIPT_NO
		EXEC DELETE_ROW_OC_RECEIPT_DETAILS @RECEIPT_NO = @TEMP
		DELETE FROM OC_RECEIPT WHERE RECEIPT_NO = @RECEIPT_NO

	END
	ELSE
	BEGIN

		PRINT 'The record against the provided id doesnt exist.'

	END

RETURN*/


/*DROP PROCEDURES*/
DROP PROCEDURE INSERT_ROW_OC_PERSON
DROP PROCEDURE INSERT_ROW_OC_PATIENT
DROP PROCEDURE INSERT_ROW_OC_PERSON_CONTACT
DROP PROCEDURE INSERT_ROW_OC_VISITS
DROP PROCEDURE INSERT_ROW_OC_DOCTOR
DROP PROCEDURE INSERT_ROW_OC_MEDICINE
DROP PROCEDURE INSERT_ROW_OC_PERSCRIPTION
DROP PROCEDURE INSERT_ROW_OC_RECEIPT_DETAILS
DROP PROCEDURE INSERT_ROW_OC_RECEIPT
DROP PROCEDURE DELETE_ROW_OC_PERSON
DROP PROCEDURE DELETE_ROW_OC_PERSON_CONTACT
DROP PROCEDURE DELETE_ROW_OC_PATEINT
DROP PROCEDURE DELETE_ROW_OC_VISITS
DROP PROCEDURE DELETE_ROW_OC_DOCTOR
DROP PROCEDURE DELETE_ROW_OC_MEDICINE
DROP PROCEDURE DELETE_ROW_OC_PERSCRIPTION
DROP PROCEDURE DELETE_ROW_OC_RECEIPT
DROP PROCEDURE DELETE_ROW_OC_RECEIPT_DETAILS